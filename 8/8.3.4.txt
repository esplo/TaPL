t -> t' の規則により場合分けをする。
p.30


(1) E-Succ: t1->t1' / succ t1 -> succ t1'

succ t1:R => R=Nat and t1:Nat
succ t1':R' => R'=Nat and t1':Nat

R=R'=Nat
t1=t1'=Nat

succ t1: Nat
succ t1': Nat
となり、題意を満たす


(2) E-PredZero: pred 0 -> 0

pred 0 : R => R=Nat, 0:Nat
0: R' => R=Nat

R=R'=Nat

pred 0: Nat
0: Nat


(3) E-PredSucc: pred (succ nv1) -> nv1

pred t : R => R=Nat, t:Nat
succ nv1 : R' => R'=Nat, nv1: Nat

R=R'=Nat

pred (succ nv1) : Nat
nv1 : Nat


(4) E-Pred: pred t1 -> pred t1'

pred t1 : R => R=Nat, t1:Nat
pred t1' : R' => R'=Nat, t1':Nat

R=R'=Nat


(5) E-IszeroZero: iszero 0 -> true

iszero 0 : R => R=Bool, 0:Nat
true : R' => R'=Bool

iszero 0: Bool
true: Bool


(6) E-IszeroSucc: iszero (succ nv1) -> false

iszero t : R => R=Bool, t:Nat
succ nv1 : R' => R'=Nat, nv1: Nat
false : Bool

iszero (succ nv1) : Bool
false : Bool


(7) E-IsZero: iszero t1 -> iszero t1'

iszero t1 : R => R=Bool, t1:Nat
iszero t1' : R' => R'=Bool, t1':Nat

R=R'=Bool

iszero t1 : Bool
iszero t1' : Bool


p.25

(8) E-IfTrue: if true then t2 else t3 -> t2

if true then t2 else t3 : R => true: Bool, t2: R, t3: R

if true then t2 else t3 : R
t2 : R


(9) E-IfFalse: if false then t2 else t3 -> t3

if false then t2 else t3 : R => true: Bool, t2: R, t3: R

if false then t2 else t3 : R
t3 : R


(10) E-If: if t1 then t2 else t3 -> if t1' then t2 else t3

if t1 then t2 else t3 : R => t1: Bool, t2: R, t3: R
if t1' then t2 else t3 : R' => t1': Bool, t2: R', t3: R'

t2に付く型は一意なので、R=R'

if t1 then t2 else t3 : R
if t1' then t2 else t3 : R
